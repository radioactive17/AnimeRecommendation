# -*- coding: utf-8 -*-
"""MovieRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_S3Mgt48klhWN8Y7E1LVASFO5h67P5hC

#Movie Recommendation System

###Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""###Reading Dataset"""

df_movies = pd.read_csv('movies.csv')
df_ratings = pd.read_csv('ratings.csv')

df_movies.head()

df_ratings.head()

df_movies_count = pd.DataFrame(df_ratings.groupby('movieId').size(), columns=['count'])
print(df_movies_count)

popular_movies = list(set(df_movies_count.query('count >= 50').index))
print(popular_movies)

movies_filter = df_ratings.movieId.isin(popular_movies).values
print(movies_filter)

df_users_count = pd.DataFrame(df_ratings.groupby('userId').size(), columns=['count'])
print(df_users_count)

active_users = list(set(df_users_count.query('count >= 50').index))
print(active_users)

users_filter = df_ratings.userId.isin(active_users).values
print(users_filter)

df_ratings_filtered = df_ratings[movies_filter & users_filter]
print(df_ratings_filtered)

movie_user_mat = df_ratings_filtered.pivot(index='movieId', columns='userId', values='rating').fillna(0)
print(movie_user_mat)

hashmap = {
            movie: i for i, movie in
            enumerate(list(df_movies.set_index('movieId').loc[movie_user_mat.index].title)) # noqa
        }
print(hashmap)

movie_user_mat_sparse = csr_matrix(movie_user_mat.values)
print(movie_user_mat_sparse)

from sklearn.neighbors import NearestNeighbors
model_knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)

model_knn.fit(movie_user_mat_sparse)

movie_name = input('Enter movie name:')

match_tuple = []
        # get match
for title, idx in hashmap.items():
    ratio = fuzz.ratio(title.lower(), movie_name.lower())
    if ratio >= 60:
        match_tuple.append((title, idx, ratio))
# sort
match_tuple = sorted(match_tuple, key=lambda x: x[2])[::-1]
if not match_tuple:
    print('Oops! No match is found')
else:
    print('Found possible matches in our database: '
          '{0}\n'.format([x[0] for x in match_tuple]))
idx = match_tuple[0][1]

distances, indices = model_knn.kneighbors(movie_user_mat_sparse[idx],n_neighbors=10+1)

raw_recommends = sorted(list(zip(indices.squeeze().tolist(), distances.squeeze().tolist())), key=lambda x: x[1])[:0:-1]
print(raw_recommends)

reverse_hashmap = {v: k for k, v in hashmap.items()}
print(reverse_hashmap)

for i, (idx, dist) in enumerate(raw_recommends):
            print('{0}: {1}, with distance '
                  'of {2}'.format(i+1, reverse_hashmap[idx], dist))